function shortestpath(source, destination, path) {  //???
    //path = [];
    var visited = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];   //标记数组
    var dist = new Array();  //原点到i顶点的最短距离
    var pre = new Array();  //记录最短路径。pre[i]放的是i的前驱节点
    for (var i = 0; i < 31; i++)
    {
        dist[i] = position[source][i];
        pre[i] = source;
    }

    min_cost = -1;//最短距离
    min_cost_index = -1;//权值最小的那个顶点的下标。（求好了）
    //主循环
    for (var i = 1; i < 31; i++)
    {
        min_cost = -1;//最短距离
        for (var j = 0; j < 31; j++)
        {
            //注意要确保这个点没有找过。
            if (visited[j] == 0 && (dist[j] < min_cost || min_cost == -1))
            {
                min_cost_index = j;
                min_cost = dist[j];
            }
        }

        visited[min_cost_index] = 1;//找到某一个点的最短距离
        //利用该点进行dist的更新，并且调整前驱。
        for (var j = 0; j < 31; j++)
        {
            //确保有连接
            if (visited[j] == 0 && position[min_cost_index][j] != -1 && min_cost + position[min_cost_index][j] < dist[j])
            {
                dist[j] = min_cost + position[min_cost_index][j];
                pre[j] = min_cost_index;
            }
        }
    }

    var path_rev = new Array();
    path[0] = destination;
    for (var i = 1; ; i ++) {
        path_rev[i] = pre[i - 1];
        if (path_rev[i] == source) {
            min_cost = i;
            break;
        }
    }
    for (var i = 1; i < min_cost; i ++) {
        path[i] = path_rev[min_cost - i];
    }
}

window.onload = function () {
    const position = 
    [[0, 244, -1, -1, -1, 306, 292, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [244, 0, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, 51, 0, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 53, 0, 193, 151, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, 193, 0, 184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [306, -1, -1, 151, 184, 0, 391, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [292, -1, -1, -1, -1, 391, 0, 83, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 83, 0, 146, 186, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 87, 146, 0, 186, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 267, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, 186, 186, 0, 191, 241, -1, -1, 242, 204, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 191, 0, 140, -1, -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, 377, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 241, 140, 0, 128, 161, -1, -1, -1, -1, -1, -1, -1, -1, -1, 360, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 128, 0, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 161, 71, 0, -1, -1, -1, -1, 214, -1, -1, -1, -1, -1, -1, -1, 650, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 242, 162, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 204, -1, -1, -1, -1, -1, 0, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 60, 63, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 60, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 214, -1, -1, 63, -1, 0, 197, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 197, 0, 100, -1, 230, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 149, 100, 0, 124, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, 0, -1, -1, -1, -1, 520, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 267, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 230, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 377, 360, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 100, 238, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, -1, 103, 30, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 238, -1, 0, 154, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 650, -1, -1, -1, -1, -1, -1, -1, 520, -1, -1, 103, 154, 0, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, 0, 76, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 0, 100, 70],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, 0]];

    var path = [];
    var startIndex = parseInt($('#start').text());
    var endIndex = parseInt($('#end').text());
    if (!isNaN(startIndex) && isNaN(endIndex)) {
        $('#search').click(shortestpath(startIndex, endIndex, path));
    }
}