'use strict'

function shortestpath(source, destination, path, position) {  //???
    var visited = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];   //标记数组
    var dist = new Array();  //原点到i顶点的最短距离
    var pre = new Array();  //记录最短路径。pre[i]放的是i的前驱节点
    for (var i = 0; i < 31; i++)
    {
        dist[i] = position[source][i];
        pre[i] = source;
    }

    var min_cost = -1;//最短距离
    var min_cost_index = -1;//权值最小的那个顶点的下标。（求好了）
    //主循环
    for (var i = 1; i < 31; i++)
    {
        min_cost = -1;//最短距离这一次
        for (var j = 0; j < 31; j++)
        {
            //注意要确保这个点没有找过。
            if (visited[j] == 0 && (dist[j] < min_cost || min_cost == -1) && dist[j] != -1 && dist[j] != 0)
            {
                min_cost_index = j;
                min_cost = dist[j];
            }
        }

        visited[min_cost_index] = 1;//找到某一个点的最短距离
        //利用该点进行dist的更新，并且调整前驱。
        for (var j = 0; j < 31; j++)
        {
            //确保有连接
            if (visited[j] == 0  && position[min_cost_index][j] != 0 && position[min_cost_index][j] != -1 && (dist[j] == -1 || min_cost + position[min_cost_index][j] < dist[j]))
            {
                dist[j] = min_cost + position[min_cost_index][j];
                pre[j] = min_cost_index;
            }
        }
    }

    var path_rev = new Array();
    path_rev[0] = destination;
    for (var i = 1; ; i ++) {
        path_rev[i] = pre[path_rev[i - 1]];
        if (path_rev[i] == source) {
            min_cost = i;
            break;
        }
    }
    for (var i = 0; i < min_cost + 1; i ++) {
        path[i] = path_rev[min_cost - i]; 
    }
}




//触发部分
window.onload = function () {
    const position = [
        [0, 244, -1, -1, -1, 306, 292, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [244, 0, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, 51, 0, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, 53, 0, 193, 151, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, 193, 0, 184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [306, -1, -1, 151, 184, 0, 391, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [292, -1, -1, -1, -1, 391, 0, 83, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, 83, 0, 146, 186, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, 87, 146, 0, 186, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 267, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, 186, 186, 0, 191, 241, -1, -1, 242, 204, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, 191, 0, 140, -1, -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, 377, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, 241, 140, 0, 128, 161, -1, -1, -1, -1, -1, -1, -1, -1, -1, 360, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 128, 0, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 161, 71, 0, -1, -1, -1, -1, 214, -1, -1, -1, -1, -1, -1, -1, 650, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, 242, 162, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, 204, -1, -1, -1, -1, -1, 0, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 60, 63, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 60, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 214, -1, -1, 63, -1, 0, 197, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 197, 0, 100, -1, 230, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 149, 100, 0, 124, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, 0, -1, -1, -1, -1, 520, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, 267, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, 230, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 377, 360, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 100, 238, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, -1, 103, 30, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 238, -1, 0, 154, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 650, -1, -1, -1, -1, -1, -1, -1, 520, -1, -1, 103, 154, 0, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, 0, 76, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 0, 100, 70],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, 0]
    ];

    const positionMap = {
        "牌坊": 0,
        "电信院": 1,
        "数据院": 2,
        "药学院": 3,
        "生命科学学院": 4,
        "超算中心": 5,
        "中山先生像": 6,
        "公共教学楼": 7,
        "行政楼": 8,
        "图书馆": 9,
        "体育馆": 10,
        "法学院": 15,
        "管理学院": 17,
        "心理学系": 16,
        "传设院楼": 18,
        "南实验楼": 20,
        "北实验楼": 19,
        "工学院小广场": 21,
        "假草": 13,
        "游泳馆": 12,
        "篮球场": 11,
        "真草": 14,
        "政务院": 22,
        "菜鸟驿站": 25,
        "格致园": 26,
        "明德园": 23,
        "一饭": 24,
        "三饭": 27,
        "中心花坛": 28,
        "慎思园": 29,
        "至善园": 30
    }
    initial();
    var path = [];
    $('#search').click(function () {
        var startIndex = positionMap[$('#startIndex').val()];
        var endIndex = positionMap[$('#endIndex').val()];
        if (!(typeof(startIndex) === 'undefined') && !(typeof(endIndex) === 'undefined')) {
            shortestpath(startIndex, endIndex, path, position);
        }
        $('path').attr('stroke', '#5568aa');
        markRoot(path);
        var distance = 0;
        for (var i = 0, len = path.length; i < len - 1; ++i) {
            distance += position[path[i]][path[i + 1]];
        }
        $('#distance').html(distance);
    });
}

function markRoot(path) {
    for (var i = 0, len = path.length; i < len - 1; ++i) {
        var start = path[i];
        var end = path[i + 1];
        if (start > end) {
            [start, end] = [end, start];
        }
        var className = '.' + (start + 1) + '-' + (end + 1);
        $(className).attr('stroke', '#fa5b5b'); // 红色
        $(className).attr('stroke-width', '7.5');
        $('.site').css('stroke', '#5568aa');
    }
}





function initial() {
    $('.site').bind('click', getInfo);
    $('text').bind('click', getInfo);
    $('#close').bind('click', closeInfo);
    $('#info').hide();
    $('#setStart').bind('click', setStart);
    $('#setEnd').bind('click', setEnd);
    $('#getSite').bind('click', getSite);
}

function getInfo(ev) {
    var x = ev.pageX;
    var y = ev.pageY;
    $('#info').show();
    $('#info').css('left', x);
    $('#info').css('top', y);

    // 地名
    if ($(this).is('text')) {
        var site = "" + $(this).html();
        $('#siteName').html(site);
        showIntroduction(site);
    }
    else {
        var site = this.className.baseVal.substring(5); // svg返回属性值时要加一个baseVal
        $('#siteName').html(site);
        showIntroduction(site);
    }
}

function setStart() {
    var site = $('#siteName').html();
    $('#startIndex').val(site);
}

function setEnd() {
    var site = $('#siteName').html();
    $('#endIndex').val(site);
}

function getSite() {
    $('.site').css('stroke', '#5568aa');
    $('path').css('stroke', '#5568aa');
    var className = '.'+ $('#siteIndex').val();
    $(className).css('stroke', '#fa5b5b');
}

function showIntroduction(site) {
    var introduction;
    switch(site) {
        case '牌坊':
            introduction = '中山大学牌坊，简称“中大牌坊”。整座门楼用钢筋三合土筑成，外饰面用花岗石砌成。前后石柱分两行，共分五门，高10.98米，宽25.315米。门额刻有“国立中山大学”六个大字，系2001年参照原有的国立中山牌坊复制而成。中山大学牌坊一直以来都是中山大学的标志。';
            break;
        case '电信院':
            introduction = '中山大学电子与信息工程学院，成立于2015年12月，是中大以学科为基础进行学院调整，整合校内学科资源，推动中大发展的改革举措。';
            break;
        case '数据院':
            introduction = '中山大学数据科学与计算机学院，2015年6月，中山大学整合移动信息工程学院、信息科学与技术学院计算机科学系、软件学院（国家示范性软件学院之一，招生计划单列）、超级计算学院以及数学与计算科学学院计算数学方向（部分人员）等计算机相关专业的优势资源，组建数据科学与计算机学院。学院主体位于中山大学东校区（广州大学城校区）。';
            break;
        case '药学院':
            introduction = '中山大学药学院是原中山大学和中山医科大学两校合并后于2002年6月成立的第一个新学院。学院以中山大学生命科学学院药学系为基础，整合了中山大学生命科学学院、中山大学化学与化学工程学院以及中山大学中山医学院有关药学科学研究的资源，以中山大学的综合力量为依托组建而成。';
            break;
        case '生命科学学院':
            introduction = '中山大学生命科学学院成立于1991年，前身为成立于1924年的中山大学生物学系。';
            break;
        case '超算中心':
            introduction = '广州超级计算中心位于广州大学城的中山大学东校区，广州超级计算中心将建设成为融高性能计算、海量数据处理、信息管理服务于一体的世界一流的超算中心，为广州、广东乃至华南地区的经济社会发展提供强大引擎。';
            break;
        case '中山先生像':
            introduction = '孙中山纪念铜像是在孙中山先生逝世后，孙中山先生的日本友人梅屋庄吉先生在1932年赠送给中国的4具塑像。梅屋庄吉先生花重金铸造了四尊孙中山铜像，希望通过孙中山铜像宣传其主义。这四尊铜像分别赠与南京中央军官学校、广州黄埔军校旧址、中山大学以及澳门国父纪念馆。';
            break;
        case '公共教学楼':
            introduction = '教学楼总面积37715平方米，由五座教学楼相连而成，由北往南依次编排为A、B、C、D、E栋，外型融为一体，中型课室位于中央三幢的1-5层。教学楼以五层为主，有部分地下室，有大小阶梯课室111间。 到目前为止，共建设多媒体课室97间，全部均为多媒体课室，公共教学楼可同时容纳1万5千7百多人同时上课学习。';
            break;
        case '图书馆':
            introduction = '中山大学东校区图书馆是中山大学图书馆的一个分支，位于大学城南北主轴的中心，是东校区的标志性建筑，荣获2006年度中国建筑工程鲁班奖（国家优质工程奖）。';
            break;
        case '体育馆':
            introduction = '中山大学体育馆，北望中山大学图书馆，南临广州大学城中环路。它与校内现有的其它体育设施相互补充，完善了学校的体育教学环境。同时它也将对社会开放，承接全国性重大体育赛事、文艺演出和大型集会，成为中大师生及周边大学体育活动及休闲的重要场所。';
            break;
        case '行政楼':
            introduction = '行政楼食堂真的是中大最难吃的食堂。';
            break;
        case '真草':
            introduction = '修了一年还是没有修好，但是我们竟然还在这上体育课。';
            break;
        case '篮球场':
            introduction = '人很多的篮球场';
            break;
        case '游泳馆':
            introduction = '人很多的游泳馆';
            break;
        case '假草':
            introduction = '每天都有很多跑步的';
            break;
        case '政务院':
            introduction = '中山大学政治与公共事务管理学院于2001年9月30日组建（简称政务学院）。现由著名的行政学家夏书章教授任名誉院长，肖滨教授任院长，梅成达任党委书记，岳经纶教授、陈天祥教授、郭忠华教授、郭志坚任副院长，陈征宇任党委副书记。';
            break;
        case '法学院':
            introduction = '1979年7月，经教育部批准，中山大学复办法律学系。1993年7月，法律学系与社会学系、政治学与行政学系以及人口研究所组成法政学院。2001年9月，中山大学撤消法政学院，以法律学系为基础建立法学院。';
            break;
        case '管理学院':
            introduction = '中山大学管理学院（Sun Yat-sen Business School）是中山大学二级学院，成立于1985年。中山大学管理学院是中国国内第二家、华南第一家同时获得AACSB、EQUIS、AMBA三项国际顶级认证的商学院。';
            break;
        case '心理学系':
            introduction = '中山大学心理学系和心理研究所于1927年8月成立并归属文史科，随后于1929年4月改属理科。首届系主任为著名心理学家、生理学家汪敬熙院士。1930年前后，随着汪敬熙教授的离职，心理学系并入研究院教育心理研究部，主任为许逢熙，蔡乐生、高觉敷等也曾担任主任。在此期间心理研究部建立了心理学实验室，开展了儿童心理、学习心理和智力测验研究并招收心理学研究生。';
            break;
        case '传设院楼':
            introduction = '传播与设计学院成立于2003年5月，经过多年的发展，传播与设计学院设有新闻学系、公共传播学系、创意媒体设计系，交互设计中心等4个系（中心），本科专业（5个）有：新闻学专业、政务传播专业、公共关系学专业、影像传播专业、网络与新媒体专业；建立起设计学科和传播学科互相促进、互相发展的良性发展格局。';
            break;
        case '南实验楼':
            introduction = '打码的地方，但是从来只用自己的电脑';
            break;
        case '北实验楼':
            introduction = '上实验课的地方，没有网';
            break;
        case '工学院小广场':
            introduction = '工学院已经没了';
            break;
        case '菜鸟驿站':
            introduction = '取快递的地方';
            break;
        case '明德园':
            introduction = '离什么都很近';
            break;
        case '格致园':
            introduction = '豪华的宿舍';
            break;
        case '一饭':
            introduction = '饭还可以';
            break;
        case '三饭':
            introduction = '开会的地方';
            break;
        case '中心花坛':
            introduction = '圆圆的中心花坛';
            break;
        case '至善园':
            introduction = '宿舍';
            break;
        case '慎思园':
            introduction = '离什么都很远的宿舍';
            break;
    }   
    $('#introduction').html(introduction);
}

function closeInfo(ev) {
    $('.site').css('stroke', '#5568aa');
    $('#info').hide();
}
